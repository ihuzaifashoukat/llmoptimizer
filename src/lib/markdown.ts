import type { PageExtract, SiteSummary } from './types'

export function toMarkdown(site: SiteSummary, pages: PageExtract[]): string {
  const lines: string[] = []
  lines.push(`# llms.txt — Site Summary`)
  lines.push(`Generated By: LLMOPTIMIZER By Huzaifa Shoukat`)
  if (site.baseUrl) lines.push(`Base URL: ${site.baseUrl}`)
  lines.push(`Generated: ${site.generatedAt}`)
  if (site.locales?.length) lines.push(`Locales: ${site.locales.join(', ')}`)
  lines.push('')
  lines.push('## Pages')
  for (const p of pages) {
    lines.push(`### ${p.title || p.url}`)
    lines.push(`URL: ${p.url}`)
    if (p.locale) lines.push(`Locale: ${p.locale}`)
    if (p.dir) lines.push(`Dir: ${p.dir}`)
    if (p.lastModified) lines.push(`Last Modified: ${p.lastModified}`)
    if (p.canonical) lines.push(`Canonical: ${p.canonical}`)
    if (p.description) lines.push(`Description: ${p.description}`)
    if (p.og && Object.keys(p.og).length) lines.push(`OpenGraph: ${JSON.stringify(p.og)}`)
    if (p.twitter && Object.keys(p.twitter).length) lines.push(`Twitter: ${JSON.stringify(p.twitter)}`)
    if (p.hreflang?.length) lines.push(`Alternate Locales: ${p.hreflang.map((h) => `${h.lang}:${h.href}`).join(' | ')}`)
    if (p.robotsMeta) lines.push(`Robots: ${p.robotsMeta}`)
    if (p.meta?.keywords?.length) lines.push(`Keywords: ${p.meta.keywords.join(', ')}`)
    if (p.meta?.viewport) lines.push(`Viewport: ${p.meta.viewport}`)
    if (p.meta?.charset) lines.push(`Charset: ${p.meta.charset}`)
    if (p.meta?.generator) lines.push(`Generator: ${p.meta.generator}`)
    if (p.headings.length) {
      lines.push('Headings:')
      for (const h of p.headings.slice(0, 20)) {
        lines.push(`- ${h.tag.toUpperCase()}: ${h.text}`)
      }
    }
    if (p.contentSnippet) {
      lines.push('Content Snippet:')
      lines.push(`> ${p.contentSnippet}`)
    }
    if (typeof p.internalLinks === 'number' || typeof p.externalLinks === 'number') {
      lines.push(`Links: internal=${p.internalLinks ?? 0}, external=${p.externalLinks ?? 0}`)
    }
    if (p.links.length) {
      lines.push('Important Links:')
      for (const l of p.links.slice(0, 15)) {
        const text = l.text || '(no text)'
        const rel = l.rel ? ` rel=${l.rel}` : ''
        lines.push(`- [${text}](${l.href})${rel}`)
      }
    }
    if (typeof p.imageCount === 'number') lines.push(`Images: total=${p.imageCount} missingAlt=${p.imagesMissingAlt ?? 0}`)
    if (p.images?.length) {
      lines.push('Images sample:')
      for (const img of p.images.slice(0, 10)) {
        lines.push(`- ${img.src} alt="${img.alt ?? ''}"`)
      }
    }
    if (p.jsonLd.length) {
      lines.push('JSON-LD Types: ' + summarizeJsonLdTypes(p.jsonLd).join(', '))
    }
    if (p.breadcrumbs?.length) {
      lines.push('Breadcrumbs: ' + p.breadcrumbs.join(' > '))
    }
    lines.push('')
  }

  return lines.join('\n') + '\n'
}

export function renderMarkdown(site: SiteSummary, pages: PageExtract[], theme: 'default' | 'compact' | 'detailed' = 'default'): string {
  if (theme === 'compact') return toCompactMarkdown(site, pages)
  if (theme === 'detailed') return toDetailedMarkdown(site, pages)
  return toMarkdown(site, pages)
}

function toCompactMarkdown(site: SiteSummary, pages: PageExtract[]): string {
  const lines: string[] = []
  lines.push(`# llms.txt — Site Summary`)
  lines.push(`Generated By: LLMOPTIMIZER BY Huzaifa Shoukat`)
  if (site.baseUrl) lines.push(`Base URL: ${site.baseUrl}`)
  lines.push(`Generated: ${site.generatedAt}`)
  lines.push('')
  lines.push('## Pages (compact)')
  for (const p of pages) {
    const title = p.title ? `“${p.title}”` : ''
    const desc = p.description ? ` — ${p.description.slice(0, 120)}` : ''
    const last = p.lastModified ? ` [Last Modified: ${p.lastModified}]` : ''
    lines.push(`- ${p.url} ${title}${desc}${last}`)
  }
  return lines.join('\n') + '\n'
}

function toDetailedMarkdown(site: SiteSummary, pages: PageExtract[]): string {
  const lines: string[] = []
  lines.push(`# llms.txt — Site Summary (Detailed)`)
  lines.push(`Generated By: LLMOPTIMIZER BY Huzaifa Shoukat`)
  if (site.baseUrl) lines.push(`Base URL: ${site.baseUrl}`)
  lines.push(`Generated: ${site.generatedAt}`)
  if (site.locales?.length) lines.push(`Locales: ${site.locales.join(', ')}`)

  // Aggregate metrics
  const totals = pages.reduce(
    (acc, p) => {
      acc.words += p.wordCount || 0
      acc.images += p.imageCount || 0
      acc.missingAlt += p.imagesMissingAlt || 0
      acc.internal += p.internalLinks || 0
      acc.external += p.externalLinks || 0
      return acc
    },
    { words: 0, images: 0, missingAlt: 0, internal: 0, external: 0 }
  )
  lines.push(`Pages: ${pages.length}`)
  lines.push(`Totals: words=${totals.words} images=${totals.images} missingAlt=${totals.missingAlt} internalLinks=${totals.internal} externalLinks=${totals.external}`)
  lines.push('')

  // Table of contents
  lines.push('## Table of Contents')
  pages.forEach((p, i) => {
    const anchor = `page-${i + 1}`
    lines.push(`- [${p.title || p.url}](#${anchor})`)
  })
  lines.push('')

  // Pages
  pages.forEach((p, i) => {
    const anchor = `page-${i + 1}`
    lines.push(`---`)
    lines.push(`<a id="${anchor}"></a>`)
    lines.push(`### ${p.title || p.url}`)
    lines.push(`URL: ${p.url}`)
    if (p.locale) lines.push(`Locale: ${p.locale}`)
    if (p.dir) lines.push(`Dir: ${p.dir}`)
    if (p.lastModified) lines.push(`Last Modified: ${p.lastModified}`)
    if (p.canonical) lines.push(`Canonical: ${p.canonical}`)
    if (p.description) lines.push(`Description: ${p.description}`)
    if (p.robotsMeta) lines.push(`Robots: ${p.robotsMeta}`)
    if (p.meta?.keywords?.length) lines.push(`Keywords: ${p.meta.keywords.join(', ')}`)
    if (p.meta?.viewport) lines.push(`Viewport: ${p.meta.viewport}`)
    if (p.meta?.charset) lines.push(`Charset: ${p.meta.charset}`)
    if (p.meta?.generator) lines.push(`Generator: ${p.meta.generator}`)
    if (p.hreflang?.length) lines.push(`Alternate Locales: ${p.hreflang.map((h) => `${h.lang}:${h.href}`).join(' | ')}`)
    if (p.og && Object.keys(p.og).length) lines.push(`OpenGraph: ${JSON.stringify(p.og)}`)
    if (p.twitter && Object.keys(p.twitter).length) lines.push(`Twitter: ${JSON.stringify(p.twitter)}`)
    if (p.headings.length) {
      lines.push('Headings:')
      p.headings.slice(0, 30).forEach((h) => lines.push(`- ${h.tag.toUpperCase()}: ${h.text}`))
    }
    if (p.contentSnippet) {
      lines.push(`Word Count: ${p.wordCount}`)
      lines.push('Content Snippet:')
      lines.push(`> ${p.contentSnippet}`)
    }
    lines.push(`Links: internal=${p.internalLinks ?? 0}, external=${p.externalLinks ?? 0}`)
    if (p.links.length) {
      lines.push('Links sample:')
      p.links.slice(0, 20).forEach((l) => {
        const text = l.text || '(no text)'
        const rel = l.rel ? ` rel=${l.rel}` : ''
        lines.push(`- [${text}](${l.href})${rel}`)
      })
    }
    lines.push(`Images: total=${p.imageCount ?? 0} missingAlt=${p.imagesMissingAlt ?? 0}`)
    if (p.images?.length) {
      lines.push('Images sample:')
      p.images.slice(0, 15).forEach((img) => lines.push(`- ${img.src} alt="${img.alt ?? ''}"`))
    }
    if (p.jsonLd.length) lines.push('JSON-LD Types: ' + summarizeJsonLdTypes(p.jsonLd).join(', '))
    if (p.breadcrumbs?.length) lines.push('Breadcrumbs: ' + p.breadcrumbs.join(' > '))
    lines.push('')
  })

  return lines.join('\n') + '\n'
}

function summarizeJsonLdTypes(items: unknown[]): string[] {
  const out = new Set<string>()
  const visit = (v: any) => {
    if (!v) return
    if (Array.isArray(v)) {
      v.forEach(visit)
    } else if (typeof v === 'object') {
      const t = (v['@type'] as string) || undefined
      if (t) out.add(Array.isArray(t) ? t.join('+') : t)
      for (const k of Object.keys(v)) visit((v as any)[k])
    }
  }
  visit(items)
  return Array.from(out)
}
